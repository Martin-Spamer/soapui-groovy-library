<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="3c834af3-27ed-4b07-85cd-95bfa59b9161" activeEnvironment="Default" name="groovy-library-project" resourceRoot="" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:testSuite id="9f3b5e1c-fb1f-4220-81cf-0aeb960b64ff" name="OAuth Example"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:properties/></con:testSuite><con:testSuite id="a4963402-fb23-40c3-9f34-8eac7b972c97" name="Library"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="398bd457-338f-4bdb-81d6-38e534aff4fa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Random Data with Groovy" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Random Data" id="9dc47e64-f221-4daf-b941-83efe647e345"><con:settings/><con:config><script>testCase = context.testCase
testSuite = testCase.testSuite

def randomEmail(String domain) {
	return randomUserName("user-") + "@" + domain
}

def randomUserName(String prefix) {
	Random rand = new Random()
	def alphaNumPool = ['a'..'z', 0..9].flatten()
	def randomChars = (0..6).collect { alphaNumPool[rand.nextInt(alphaNumPool.size())] }
	return prefix + randomChars.join()
}

log.info randomUserName("user-")
log.info randomEmail("example.com")

testSuite.setPropertyValue("newUserName", randomUserName("user-"))
log.info testSuite.getPropertyValue("newUserName")
log.info context.expand('${#TestSuite#newUserName}')
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="761ab447-810f-4761-a20e-5ababafc0cc0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Using JAR" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="5ff66571-9f79-4033-a0f6-02fa9b3188c0"><con:settings/><con:config><script>this.getClass().classLoader.rootLoader.addURL(new File("pojo.jar").toURL())</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="84d6cba8-381b-41e9-a897-bd6b96c827bc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Using Apache SFTP" searchProperties="true" disabled="true"><con:settings/><con:testStep type="manualTestStep" name="Manual TestStep" id="a0bae0b8-8725-4b8b-bc51-47fbcbcc09db"><con:description>Install the Apache SFTP Jar</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="groovy" name="Show the Java Library path" id="0a17b9b1-5b91-4360-9e5f-69bf6dbe750b"><con:settings/><con:config><script>log.info System.properties["java.library.path"]
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="d7e6868a-df9f-478b-8198-f5ccf3185eb0"><con:settings/><con:config><script>import org.apache.commons.net.ftp.FTPClient

// test.rebex.net:22
new FTPClient().with {
    connect "test.rebex.net"
    enterLocalPassiveMode()
    login "demo", "password"
    changeWorkingDirectory "/pub/example"
    def incomingFile = new File("local-filename.txt")
    incomingFile.withOutputStream { ostream -> retrieveFile "readme.txt", ostream }
    disconnect()
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ed9ee162-69cb-4324-9b0d-958cb1033880" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Scoping Properties" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="364fbd3e-e747-4f01-936d-75674750334d"><con:settings/><con:config><script>// get properties from testCase, testSuite and project
log.info testRunner.testCase.name + "=" + testRunner.testCase.getPropertyValue( "PropertyName" )
log.info testRunner.testCase.testSuite.name + "=" + testRunner.testCase.testSuite.getPropertyValue( "PropertyName" )
log.info testRunner.testCase.testSuite.project.name + "=" + testRunner.testCase.testSuite.project.getPropertyValue( "PropertyName" )
log.info com.eviware.soapui.SoapUI.globalProperties.getPropertyValue( "PropertyName" )

context.expand( '${#Project#PropertyName}' )
context.expand( '${#TestSuite#PropertyName}' )
context.expand( '${#TestCase#PropertyName}' )
context.expand( '${#TestStep#PropertyName}' )
</script></con:config></con:testStep><con:testStep type="groovy" name="System Properties" id="ac421e8b-129b-4f4b-8386-499fb93db1f3"><con:settings/><con:config><script>systemProperty = context.expand('${=System.getProperty("soapui.home")}')
testRunner.testCase.setPropertyValue("systemProperty", systemProperty)
log.info("systemProperty="+testRunner.testCase.getPropertyValue("systemProperty"))

log.info context.expand('${=System.getProperty("JAVA_HOME")}')
</script></con:config></con:testStep><con:properties><con:property><con:name>systemProperty</con:name><con:value>C:\Users\Martin Spamer\SoapUI-5.4.0/bin</con:value></con:property></con:properties></con:testCase><con:testCase id="0234f5e9-cd5e-482c-a6e6-f293b058f9e6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reusable-Module-Example" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Reusable Groovy Script" id="874b524a-407d-4871-bdeb-521bbf580439"><con:settings/><con:config><script>class Example {
	def log
	def context
	def testRunner

 	// Class constructor with same case as Class name
 	def Example(logIn,contextIn,testRunnerIn) {
 		this.log = logIn
 		this.context = contextIn
 		this.testRunner = testRunnerIn
	}

 def execute(message) {
      // do some stuff to prove I've run with right context, etc.
      log.info testRunner
      log.info context
      log.info "return "+message
      return message
	}
}

context.setProperty( "example", new Example( log, context, testRunner) )
log.info "Library Context:"+context
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="484c94b0-83b4-4fdd-9d91-957cbc587828"><con:settings/><con:config><script>// get a reference to the library TestSuite
library = testRunner.testCase.testSuite.project.testSuites["Library"]
assert library != null

// find the module within the library 
module = library.testCases["Reusable-Module-Example"].testSteps["Reusable Groovy Script"]
assert module != null

// initialise the library; which places an instance of Example in the context
module.run(testRunner, context)

// get the instance of example from the context.
def example = context.example

// run the method, with parameter
log.info "example.execute() = " + example.execute("Tester")
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="41015481-0aa4-49e4-a3ec-38f4d2403274" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Property Expansions" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Property Expansions" id="cf0b7ff8-21fd-4e5f-80ee-fc0c3dbb6852"><con:settings/><con:config><script>log.info("="*40)
log.info context.expand("${#TestSuite#newUserName}")

log.info("startTime : " + context.expand('${=System.currentTimeMillis()}'))
log.info("nanoStartTime : " + context.expand('${=System.nanoTime()}'))

log.info("Integer.SIZE : " + context.expand('${=Integer.SIZE'))
log.info("Integer.MIN_VALUE : " + context.expand('${=Integer.MIN_VALUE}'))
log.info("Integer.MAX_VALUE : " + context.expand('${=Integer.MAX_VALUE}'))

log.info("Long.SIZE : " + context.expand('${=Long.SIZE}'))
log.info("Long.MIN_VALUE : " + context.expand('${=Long.MIN_VALUE}'))
log.info("Long.MAX_VALUE : " + context.expand('${=Long.MAX_VALUE}'))

log.info("currentLocale : " + context.expand('${=Locale.getDefault()}'))
log.info("randomNumber : " + context.expand('${= new Random().nextInt()}'))
log.info("randomBoolean : " + context.expand('${= new Random().nextBoolean()}'))
log.info("correlationID : " + context.expand('${=java.util.UUID.randomUUID()}'))

log.info("currentTime : " + context.expand('${=Calendar.getInstance().getTime()}'))
log.info("isoDate : " + context.expand('${=new java.text.SimpleDateFormat("yyyy-MM-dd").format(Calendar.getInstance().getTime())}'))
log.info("lastWeek : " +  context.expand('${=def lastWeek = new Date() -7;  lastWeek.format("YYYY-MM-dd")}'))
log.info("nextWeek : " +  context.expand('${=def nextWeek = new Date() + 7; nextWeek.format("YYYY-MM-dd")}'))

log.info("systemProperty : " + context.expand('${=System.getProperty("soapui.home")}'))
log.info("systemProperty : " + context.expand('${=System.getProperties()}'))

log.info("nanoEndtTime : " + context.expand('${=System.nanoTime()}'))
log.info("endtTime : " + context.expand('${=System.currentTimeMillis()}'))
</script></con:config></con:testStep><con:properties><con:property><con:name>randomNumber</con:name><con:value>989945288</con:value></con:property><con:property><con:name>randomBoolean</con:name><con:value>false</con:value></con:property><con:property><con:name>correlationID</con:name><con:value>a90db0b8-3987-479d-aa7a-a0ac02ae2938</con:value></con:property><con:property><con:name>startTime</con:name><con:value>1544563510246</con:value></con:property><con:property><con:name>currentTime</con:name><con:value>Tue Dec 11 21:25:10 GMT 2018</con:value></con:property><con:property><con:name>isoDate</con:name><con:value>2018-25-11</con:value></con:property><con:property><con:name>currentLocale</con:name><con:value>en_GB</con:value></con:property><con:property><con:name>systemProperty</con:name><con:value>C:\Program Files (x86)\SmartBear\SoapUI-5.4.0/bin</con:value></con:property></con:properties></con:testCase><con:testCase id="c249ced2-ed7e-42b1-9829-7288c69c8813" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Controlling the Results Folder" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="e65df997-33ea-4307-9ddd-a9dc4311e8ea"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// define location relative to SOAPUI project.
String projectPath = groovyUtils.projectPath + "/logs/"

context.setProperty( "RootResultFolder", projectPath)
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="124b6baa-cbe1-4182-a0a8-681dae6c7b02" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="System Properties" searchProperties="true"><con:settings/><con:testStep type="groovy" name="System Properties" id="c16b98ab-ffdc-45e6-aa14-17369bb622e1"><con:settings/><con:config><script>systemProperty = context.expand('${=System.getProperty("soapui.home")}')
testRunner.testCase.setPropertyValue("systemProperty", systemProperty)
log.info("systemProperty="+testRunner.testCase.getPropertyValue("systemProperty"))

log.info context.expand('${=System.getProperty("JAVA_HOME")}')
</script></con:config></con:testStep><con:properties><con:property><con:name>systemProperty</con:name><con:value>C:\Users\Martin Spamer\SoapUI-5.4.0/bin</con:value></con:property></con:properties></con:testCase><con:testCase id="75fa68a5-1abc-405a-9f93-f384640aaaa8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Run External Groovy Script" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="b76f8bd8-21b6-4b14-bc9c-128db68cb481"><con:settings/><con:config><script>import groovy.lang.Binding
import groovy.util.GroovyScriptEngine

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

// location of script file is relative to SOAPUI project file.
String scriptPath = groovyUtils.projectPath + "/groovy/"

// Create Groovy Script Engine to run the script.
GroovyScriptEngine gse = new GroovyScriptEngine(scriptPath) 

// Load the Groovy Script file 
externalScript = gse.loadScriptByName("external.groovy")  

// Create a runtime instance of script
instance = externalScript.newInstance()

// Sanity check 
assert instance!= null

log.info(instance);

// run the foo method in the external script
instance.foo()
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4dc765a8-d26a-47e0-83a1-94ec38fceae4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Selenium WebDriver" searchProperties="true"><con:description>
Download Selenium (selenium-server-standalone-2.*.jar)
Add Jar to the SoapUI classpath, install into the %SOAPUI_HOME%\bin\ext folder is the easiest way.
 </con:description><con:settings/><con:testStep type="manualTestStep" name="Add Selenium WebDriver support" id="22966ce6-bf58-48fa-93fa-9f6c574a1d29"><con:description>
Download Selenium (selenium-server-standalone-2.*.jar)
Add Jar to the SoapUI classpath, install into the %SOAPUI_HOME%\bin\ext folder is the easiest way.
Then disable this test step to stop it re-appearing.
 </con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="27a56fcd-6c9a-4f68-8d03-ecc603b57228"><con:settings/><con:config><script>import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait

// Create a new instance of the WebDriver implementation, 
// @todo use class factory.
WebDriver driver = new FirefoxDriver()
assert webDriver
log.info webDriver

driver.get("http://www.google.com")

WebElement element = webDriver.findElement(By.name("q"))

// Enter something to search for :
element.sendKeys("SOAPUI Groovy Library")

// Now submit the form. WebDriver will find the form for us from the element
element.submit()

// Check the title of the page
String pageTitle = webDriver.getTitle()
assert pageTile.contains "SOAPUI Groovy Library"
log.info("Page title: " + pageTile)

//Close the browser
webDriver.quit()</script></con:config></con:testStep><con:testStep type="groovy" name="FluentWait" id="635ab286-182d-4232-a0ac-36cbf0d901a8"><con:settings/><con:config><script>import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait

// Create a new instance of the WebDriver implementation, 
// @todo use class factory.
WebDriver driver = new FirefoxDriver()

driver.get("http://www.google.com")

WebElement element = driver.findElement(By.name("q"))

// Enter something to search for :
element.sendKeys("SOAPUI Groovy Library")

// Now submit the form. WebDriver will find the form for us from the element
element.submit()

// Check the title of the page
String pageTitle = driver.getTitle()
assert pageTile.contains "SOAPUI Groovy Library"
log.info("Page title: " + pageTile)

// FluentWait for dynamically rendered content to be provided.
// Wait for the page to load, timeout after 10 seconds
(new WebDriverWait(driver, 10)).until(new ExpectedCondition() {
    public Boolean apply(WebDriver d) {
        return d.getTitle().toLowerCase().startsWith("cheese!")
    }
});

//Close the browser
driver.quit()</script></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>newUserName</con:name><con:value>user-baxpgmd</con:value></con:property></con:properties></con:testSuite><con:properties><con:property><con:name>Name</con:name><con:value>Project-Name</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>