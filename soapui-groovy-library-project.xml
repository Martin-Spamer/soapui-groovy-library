<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="3c834af3-27ed-4b07-85cd-95bfa59b9161" activeEnvironment="Default" name="groovy-library-project" resourceRoot="" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:testSuite id="a4963402-fb23-40c3-9f34-8eac7b972c97" name="Library"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="41015481-0aa4-49e4-a3ec-38f4d2403274" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SOAPUI Property Expansions" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Property Expansions" id="cf0b7ff8-21fd-4e5f-80ee-fc0c3dbb6852"><con:settings/><con:config><script>
log.info("startTime : " + context.expand('${=System.currentTimeMillis()}'))
log.info("nanoStartTime : " + context.expand('${=System.nanoTime()}'))

log.info("Integer.SIZE : " + context.expand('${=Integer.SIZE'))
log.info("Integer.MIN_VALUE : " + context.expand('${=Integer.MIN_VALUE}'))
log.info("Integer.MAX_VALUE : " + context.expand('${=Integer.MAX_VALUE}'))

log.info("Long.SIZE : " + context.expand('${=Long.SIZE}'))
log.info("Long.MIN_VALUE : " + context.expand('${=Long.MIN_VALUE}'))
log.info("Long.MAX_VALUE : " + context.expand('${=Long.MAX_VALUE}'))

log.info("currentLocale : " + context.expand('${=Locale.getDefault()}'))
log.info("randomNumber : " + context.expand('${= new Random().nextInt()}'))
log.info("randomBoolean : " + context.expand('${= new Random().nextBoolean()}'))
log.info("correlationID : " + context.expand('${=java.util.UUID.randomUUID()}'))

log.info("currentTime : " + context.expand('${=Calendar.getInstance().getTime()}'))
log.info("isoDate : " + context.expand('${=new java.text.SimpleDateFormat("yyyy-MM-dd").format(Calendar.getInstance().getTime())}'))
log.info("lastWeek : " +  context.expand('${=def lastWeek = new Date() -7;  lastWeek.format("YYYY-MM-dd")}'))
log.info("nextWeek : " +  context.expand('${=def nextWeek = new Date() + 7; nextWeek.format("YYYY-MM-dd")}'))

log.info("systemProperty : " + context.expand('${=System.getProperty("soapui.home")}'))
log.info("systemProperty : " + context.expand('${=System.getProperties()}'))

log.info("nanoEndtTime : " + context.expand('${=System.nanoTime()}'))
log.info("endtTime : " + context.expand('${=System.currentTimeMillis()}'))

log.info("="*40)
</script></con:config></con:testStep><con:properties><con:property><con:name>randomNumber</con:name><con:value>989945288</con:value></con:property><con:property><con:name>randomBoolean</con:name><con:value>false</con:value></con:property><con:property><con:name>correlationID</con:name><con:value>a90db0b8-3987-479d-aa7a-a0ac02ae2938</con:value></con:property><con:property><con:name>startTime</con:name><con:value>1544563510246</con:value></con:property><con:property><con:name>currentTime</con:name><con:value>Tue Dec 11 21:25:10 GMT 2018</con:value></con:property><con:property><con:name>isoDate</con:name><con:value>2018-25-11</con:value></con:property><con:property><con:name>currentLocale</con:name><con:value>en_GB</con:value></con:property><con:property><con:name>systemProperty</con:name><con:value>C:\Program Files (x86)\SmartBear\SoapUI-5.4.0/bin</con:value></con:property></con:properties></con:testCase><con:testCase id="ed9ee162-69cb-4324-9b0d-958cb1033880" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SOAPUI Property scopes" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="364fbd3e-e747-4f01-936d-75674750334d"><con:settings/><con:config><script>import com.eviware.soapui.SoapUI

def String propertyName = 'PropertyName'

// put properties into the testCase, testSuite and project
testRunner.testCase.setPropertyValue( propertyName, 'PropertyValue for testCase scope' )
testRunner.testCase.testSuite.setPropertyValue( propertyName, 'PropertyValue for testSuite scope' )
testRunner.testCase.testSuite.project.setPropertyValue( propertyName, 'PropertyValue in project scope' )

// get properties from testCase, testSuite and project
log.info testRunner.testCase.name + "=" + testRunner.testCase.getPropertyValue(propertyName )
log.info testRunner.testCase.testSuite.name + "=" + testRunner.testCase.testSuite.getPropertyValue(propertyName )
log.info testRunner.testCase.testSuite.project.name + "=" + testRunner.testCase.testSuite.project.getPropertyValue( propertyName )

// using property expansion to retrieve the values
log.info context.expand( '${#Project#PropertyName}' )
log.info context.expand( '${#TestSuite#PropertyName}' )
log.info context.expand( '${#TestCase#PropertyName}' )
log.info context.expand( '${#TestStep#PropertyName}' )
</script></con:config></con:testStep><con:testStep type="groovy" name="System Properties" id="ac421e8b-129b-4f4b-8386-499fb93db1f3"><con:settings/><con:config><script>systemProperty = context.expand('${=System.getProperty("soapui.home")}')
testRunner.testCase.setPropertyValue("systemProperty", systemProperty)
log.info("systemProperty="+testRunner.testCase.getPropertyValue("systemProperty"))

log.info context.expand('${=System.getProperty("JAVA_HOME")}')
</script></con:config></con:testStep><con:properties><con:property><con:name>systemProperty</con:name><con:value>C:\Users\Martin Spamer\SoapUI-5.4.0/bin</con:value></con:property><con:property><con:name>PropertyName</con:name><con:value>PropertyValue for testCase scope</con:value></con:property></con:properties></con:testCase><con:testCase id="d24f88b9-3ce2-4db9-8b03-368e09cbfd5a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SOAUI Context Objects" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Put TestData instance into Context." id="1b9d810d-3305-471e-a158-940625a278af"><con:settings/><con:config><script>class TestData {
	def randomId() {
		return UUID.randomUUID().toString()
	}
	def randomEmail() {
		return randomEmail("@example.com")
	}
	def randomEmail(String domain) {
		return randomUserName("user-") + "@" + domain
	}
	def randomUserName() {
		return randomUserName("test-user-")
	}
	def randomUserName(String prefix) {
		Random rand = new Random()
		def alphaNumPool = ['a'..'z', 0..9].flatten()
		def randomChars = (0..6).collect { alphaNumPool[rand.nextInt(alphaNumPool.size())] }
		return prefix + randomChars.join()
	}
}

def testData = new TestData()
log.info testData.randomUserName()
log.info testData.randomUserName("user-")
log.info testData.randomEmail()
log.info testData.randomEmail("example.com")

// Put the object into the context
context.setProperty( "testData", testData )
log.info "Library Context : " + context
</script></con:config></con:testStep><con:testStep type="groovy" name="Using TestData instance from Context." id="6521f857-70e0-44d4-b1d9-eecf4eb5c5d4"><con:settings/><con:config><script>
def propertyObj = context.getProperty("testData")
assert propertyObj 

log.info propertyObj.randomUserName()
log.info propertyObj.randomUserName("user-")
log.info propertyObj.randomEmail()
log.info propertyObj.randomEmail("example.com")
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0234f5e9-cd5e-482c-a6e6-f293b058f9e6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SOAUI Reusable-Module-Example" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Reusable Groovy Script" id="874b524a-407d-4871-bdeb-521bbf580439" disabled="true"><con:settings/><con:config><script>// TestStep is deliberately disabled, so that this is only run when called explicitly.

class Example {
	def log
	def context
	def testRunner

 	// Class constructor with same case as Class name
 	def Example(logIn,contextIn,testRunnerIn) {
 		this.log = logIn
 		this.context = contextIn
 		this.testRunner = testRunnerIn
	}

	def execute(message) {
	      // do some stuff to prove I've run with right context, etc.
	      log.info testRunner
	      log.info context
	      log.info 'returned : ' + message
	      return message
	}
}

// Place the example object into the context
context.setProperty( "example", new Example( log, context, testRunner) )
log.info "Library Context : " + context
</script></con:config></con:testStep><con:testStep type="groovy" name="Using Groovy Library" id="484c94b0-83b4-4fdd-9d91-957cbc587828"><con:settings/><con:config><script>// Get a reference to the library (a TestSuite) by name
def library = testRunner.testCase.testSuite.project.testSuites["Library"]
assert library
log.info library

// find the module from within the library (a TestSuite) by name
def module = library.testCases["SOAUI Reusable-Module-Example"]
assert module
log.info module

// find the script from within module (a TestCase) by name
def script = module.testSteps["Reusable Groovy Script"]
assert script
log.info script

// initialise the library; which places an instance of Example in the context
script.run(testRunner, context)

// get the instance of example from the context.
def example = context.example

// run the method, with parameter
log.info "example.execute() : " + example.execute("Tester")
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3b9c3481-3e73-4929-9090-a1a0026c563c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SOAPUI Meta Programming" searchProperties="true"><con:settings/><con:testStep type="groovy" name="SOAPUI Project Structure" id="6a483aff-2895-45c3-bf12-e8c46efe1be8"><con:settings/><con:config><script>// testCase ---> testSuite --->Project

// https://www.soapui.org/apidocs/com/eviware/soapui/model/testsuite/TestRunner.html

def testCase = testRunner.testCase
log.info testCase.label
// https://www.soapui.org/apidocs/com/eviware/soapui/model/testsuite/TestCase.html

def testSuite = testCase.testSuite
log.info testSuite.label
// https://www.soapui.org/apidocs/com/eviware/soapui/model/testsuite/TestSuite.html

def project = testSuite.project
log.info project.name
// https://www.soapui.org/apidocs/com/eviware/soapui/model/project/Project.html

def workspace = project.getWorkspace()
log.info workspace.name
// https://www.soapui.org/apidocs/com/eviware/soapui/model/workspace/Workspace.html
</script></con:config></con:testStep><con:testStep type="groovy" name="SOAPUI Walking Project Structure" id="d4b6f32c-b882-4d90-ab40-7fd046c18e28"><con:settings/><con:config><script>// testCase ---> testSuite --->Project

def project = testRunner.testCase.testSuite.project

// Project &lt;>-> testSuite &lt;>-> testCase
log.info project.getClass().getName()

// traditional
for (testSuite in project.testSuiteList) {
	log.info '-'+testSuite.name
	for (testCase in testSuite.testCaseList) {
	log.info '--'+testCase.name
	for (testStep in testCase.testStepList) {
		log.info '---'+testStep.name
      }
    }
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of SOAPUI Walking Project Structure" id="219e26d2-3fbe-4117-9278-e30238fbd8f7"><con:settings/><con:config><script>// testCase ---> testSuite --->Project

def project = testRunner.testCase.testSuite.project

// Project &lt;>-> testSuite &lt;>-> testCase
log.info project.getClass().getName()

// idiomatic groovy
project.testSuiteList.each { 
	testSuite -> log.info testSuite.name + testSuite.getClass().getName()
		testSuite.testCaseList.each {
		testCase -> log.info testCase.name + testCase.getClass().getName()
			testCase.getTestStepList().each { 
				testStep -> log.info testStep.name + testStep.getClass().getName()
		}
	}
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Test Results" id="1b3f44c7-8253-49c6-8697-8cfad2480f0c"><con:settings/><con:config><script>for ( testCaseResult in testRunner.results ) {
	log.info testCaseResult.getClass()
	log.info testCaseResult

	// Check whether the test case has failed
	if ( testCaseResult.getStatus().toString() == 'FAILED' ) {
		// Log the resulting messages of the failed test cases and test steps
		log.info "$testCaseName has failed"
		for ( testStepResult in testCaseResult.getResults() ) {
			testStepResult.messages.each() { msg -> log.info msg }
		}
	} 
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="c249ced2-ed7e-42b1-9829-7288c69c8813" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SOAPUI Controlling the Results Folder" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Logging to custom folder" id="e65df997-33ea-4307-9ddd-a9dc4311e8ea"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// define location relative to SOAPUI project.
String projectPath = groovyUtils.projectPath + "/logs/"

context.setProperty( "RootResultFolder", projectPath)
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="75fa68a5-1abc-405a-9f93-f384640aaaa8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SOAPUI Run External Groovy Script" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Run decoupled Groovy Script" id="38f10abc-4c34-4c69-aaf1-f6d1ab063ba2"><con:settings/><con:config><script>import groovy.lang.Binding
import groovy.util.GroovyScriptEngine

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

// location of script file is relative to SOAPUI project file.
String scriptPath = groovyUtils.projectPath + "/groovy/"

// Create Groovy Script Engine to run the script.
GroovyScriptEngine gse = new GroovyScriptEngine(scriptPath) 

// Load the Groovy Script file 
externalScript = gse.loadScriptByName("Script.groovy")  

// Create a runtime instance of script
instance = externalScript.newInstance()

// Sanity check 
assert instance!= null

log.info(instance);
</script></con:config></con:testStep><con:testStep type="groovy" name="Run Groovy Script Function" id="b76f8bd8-21b6-4b14-bc9c-128db68cb481"><con:settings/><con:config><script>import groovy.lang.Binding
import groovy.util.GroovyScriptEngine

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

// location of script file is relative to SOAPUI project file.
String scriptPath = groovyUtils.projectPath + "/groovy/"

// Create Groovy Script Engine to run the script.
GroovyScriptEngine gse = new GroovyScriptEngine(scriptPath) 

// Load the Groovy Script file 
externalScript = gse.loadScriptByName("ExternalFunction.groovy")  

// Create a runtime instance of script
instance = externalScript.newInstance()

// Sanity check 
assert instance!= null

log.info(instance);

// run the foo method in the external script
instance.foo()
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="761ab447-810f-4761-a20e-5ababafc0cc0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SOAPUI Using JAR" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="5ff66571-9f79-4033-a0f6-02fa9b3188c0"><con:settings/><con:config><script>import groovy.lang.Binding

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

// location of script file is relative to SOAPUI project file.
String jarPath = groovyUtils.projectPath + "/jars/"

jarFilename = jarPath + "pojo.jar"
jarFile = new File()

rootLoader = this.getClass().classLoader.rootLoader.
rootLoader.addURL(jarFile.toURL())
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b33a4573-5d3b-4381-8f2f-fbd487e278e2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SOAUI JDBC" searchProperties="true" disabled="true"><con:settings/><con:testStep type="jdbc" name="JDBC Request" id="349fb48e-93ab-498f-8a91-224f6a3e79fe"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties/></con:config></con:testStep><con:testStep type="groovy" name="Groovy JDBC" id="d39a811a-8ca9-4989-b473-ea2649c26722"><con:settings/><con:config><script/></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4dc765a8-d26a-47e0-83a1-94ec38fceae4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SOAUI Selenium WebDriver" searchProperties="true" disabled="true"><con:description>
Download Selenium (selenium-server-standalone-2.*.jar)
Add Jar to the SoapUI classpath, install into the %SOAPUI_HOME%\bin\ext folder is the easiest way.
 </con:description><con:settings/><con:testStep type="manualTestStep" name="Add Selenium WebDriver support" id="22966ce6-bf58-48fa-93fa-9f6c574a1d29"><con:description>
Download Selenium (selenium-server-standalone-2.*.jar)
Add Jar to the SoapUI classpath, install into the %SOAPUI_HOME%\bin\ext folder is the easiest way.
Then disable this test step to stop it re-appearing.
 </con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult/></con:config></con:testStep><con:testStep type="groovy" name="Essentials Example" id="27a56fcd-6c9a-4f68-8d03-ecc603b57228"><con:settings/><con:config><script>import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait

// Create a new instance of the WebDriver implementation, 
// @todo use class factory.
WebDriver driver = new FirefoxDriver()
assert webDriver
log.info webDriver

driver.get("http://www.google.com")

WebElement element = webDriver.findElement(By.name("q"))

// Enter something to search for :
element.sendKeys("SOAPUI Groovy Library")

// Now submit the form. WebDriver will find the form for us from the element
element.submit()

// Check the title of the page
String pageTitle = webDriver.getTitle()
assert pageTile.contains("SOAPUI Groovy Library")
log.info("Page title: " + pageTile)

//Close the browser
webDriver.quit()</script></con:config></con:testStep><con:testStep type="groovy" name="FluentWait example" id="635ab286-182d-4232-a0ac-36cbf0d901a8"><con:settings/><con:config><script>import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait

// Create a new instance of the WebDriver implementation, 
// @todo use class factory.
WebDriver driver = new FirefoxDriver()

driver.get("http://www.google.com")

WebElement element = driver.findElement(By.name("q"))

// Enter something to search for :
element.sendKeys("SOAPUI Groovy Library")

// Now submit the form. WebDriver will find the form for us from the element
element.submit()

// Check the title of the page
String pageTitle = driver.getTitle()
assert pageTile.contains "SOAPUI Groovy Library"
log.info("Page title: " + pageTile)

// FluentWait for dynamically rendered content to be provided.
// Wait for the page to load, timeout after 10 seconds
(new WebDriverWait(driver, 10)).until(new ExpectedCondition() {
    public Boolean apply(WebDriver d) {
        return d.getTitle().toLowerCase().startsWith("cheese!")
    }
});

//Close the browser
driver.quit()</script></con:config></con:testStep><con:testStep type="groovy" name="FluentWait in practice" id="d195901a-2801-4788-ba70-463dcddcf23d"><con:settings/><con:config><script>import org.openqa.selenium.By
import org.openqa.selenium.WebDriver
import org.openqa.selenium.WebElement
import org.openqa.selenium.firefox.FirefoxDriver
import org.openqa.selenium.support.ui.ExpectedCondition
import org.openqa.selenium.support.ui.WebDriverWait

// Create a new instance of the WebDriver implementation, 
// @todo use class factory.
WebDriver driver = new FirefoxDriver()

driver.get("http://www.google.com")

WebElement element = driver.findElement(By.name("q"))

// Enter something to search for :
element.sendKeys("SOAPUI Groovy Library")

// Now submit the form. WebDriver will find the form for us from the element
element.submit()

// Check the title of the page
String pageTitle = driver.getTitle()
assert pageTile.contains "SOAPUI Groovy Library"
log.info("Page title: " + pageTile)

// FluentWait for dynamically rendered content to be provided.
// Wait for the page to load, timeout after 10 seconds
(new WebDriverWait(driver, 10)).until(new ExpectedCondition() {
    public Boolean apply(WebDriver d) {
        return d.getTitle().toLowerCase().startsWith("cheese!")
    }
});

//Close the browser
driver.quit()</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="84d6cba8-381b-41e9-a897-bd6b96c827bc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SOAUI with Apache SFTP" searchProperties="true" disabled="true"><con:settings/><con:testStep type="manualTestStep" name="Manual TestStep" id="a0bae0b8-8725-4b8b-bc51-47fbcbcc09db"><con:description>Install the Apache SFTP Jar</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="groovy" name="Show the Java Library path" id="0a17b9b1-5b91-4360-9e5f-69bf6dbe750b"><con:settings/><con:config><script>log.info System.properties["java.library.path"]
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="d7e6868a-df9f-478b-8198-f5ccf3185eb0"><con:settings/><con:config><script>import org.apache.commons.net.ftp.FTPClient

// test.rebex.net:22
new FTPClient().with {
    connect "test.rebex.net"
    enterLocalPassiveMode()
    login "demo", "password"
    changeWorkingDirectory "/pub/example"
    def incomingFile = new File("local-filename.txt")
    incomingFile.withOutputStream { ostream -> retrieveFile "readme.txt", ostream }
    disconnect()
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="398bd457-338f-4bdb-81d6-38e534aff4fa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Groovy Random Data" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Random Data Functions" id="9dc47e64-f221-4daf-b941-83efe647e345"><con:settings/><con:config><script>
def randomId() {
	return UUID.randomUUID().toString()
}

def randomEmail() {
	return randomEmail("@example.com")
}

def randomEmail(String domain) {
	return randomUserName("user-") + "@" + domain
}

def randomUserName() {
	return randomUserName("test-user-")
}

def randomUserName(String prefix) {
	Random rand = new Random()
	def alphaNumPool = ['a'..'z', 0..9].flatten()
	def randomChars = (0..6).collect { alphaNumPool[rand.nextInt(alphaNumPool.size())] }
	return prefix + randomChars.join()
}

log.info randomId()
log.info randomUserName()
log.info randomUserName("user-")
log.info randomEmail()
log.info randomEmail("example.com")
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="6556421a-0f58-42c3-83ef-f929d399a5f1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Groovy Slf4j" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="067047c7-3ee9-4cf8-9c75-4c3dbad65ec1"><con:settings/><con:config><script>import org.slf4j.Logger;

import org.slf4j.LoggerFactory;

  //   Logger logger = LoggerFactory.getLogger(this.getClass());
 //	LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME)
    Logger logger = LoggerFactory.getLogger(this.getClass().getName());
    logger.trace("Hello World");
    logger.debug("Hello World");
    logger.info("Hello World");
    logger.warn("Hello World");
    logger.error("Hello World");</script></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>newUserName</con:name><con:value>user-19av599</con:value></con:property><con:property><con:name>PropertyName</con:name><con:value>PropertyValue for testSuite scope</con:value></con:property></con:properties></con:testSuite><con:properties><con:property><con:name>Name</con:name><con:value>Project-Name</con:value></con:property><con:property><con:name>PropertyName</con:name><con:value>PropertyValue in project scope</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>